{"version":3,"sources":["components/shared/button.jsx","components/carousel-new-novels.js","components/supporting/helperFunctions.js","components/shared/modal.jsx","App.js","index.js"],"names":["Button","_ref","classname","text","onclick","console","log","react_default","a","createElement","className","onClick","NewNovelCarousel","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","books","undefined","book","setState","sort","b","datePartsA","dataAdded","split","datePartsB","alpha","Date","beta","getTime","reverse","latestNovelAdditionsFirst","slice","forEach","index","_this2","key","toString","style","backgroundImage","concat","picSource","JSON","stringify","name","shared_button","e","toggleModal","description","lib_default","arrow","dots","lazyLoad","infinite","speed","slidesToShow","slidesToScroll","initialSlide","adaptiveHeight","autoplay","React","Component","Modal","showModal","modalContent","src","alt","ranking","url","href","target","rel","textDecoration","App","showMenu","button","document","getElementsByClassName","window","scrollY","bind","assertThisInitialized","content","preventDefault","addEventListener","_this$state","id","BurgerMenu","width","carousel_new_novels_NewNovelCarousel","modal","Base","axios","get","then","res","data","Helmet","charSet","type","sizes","property","src_App","ReactDOM","render","src_Base","getElementById"],"mappings":"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","file":"static/js/main.b56d165f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//this gets updates once setState is triggered in app.js\r\nconst Button = ({ classname, text, onclick }) => {\r\n    console.log(text);\r\n    \r\n    if (onclick) {\r\n        return (<button className={classname} onClick={onclick}>{text}</button>)\r\n    } else {\r\n        return (<button className={classname}>{text}</button>)\r\n    }\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\nimport { latestNovelAdditionsFirst } from \"./supporting/helperFunctions\";\r\nimport Slider from \"react-slick\";\r\nimport Button from \"./shared/button\";\r\n\r\nexport default class NewNovelCarousel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //books stores the whole database, book is for an individual book\r\n    this.state = { books: undefined, book: undefined };\r\n  }\r\n\r\n  //accounts for the database to update while browsing and enforcing the data being there\r\n  componentDidUpdate() {\r\n    if (this.state.books) {\r\n      if (this.props.books !== this.state.books) {\r\n        this.setState({ books: this.props.books });\r\n      }\r\n    } else {\r\n      this.setState({ books: this.props.books });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.books) {\r\n\r\n      //searches for the newest additions to the database\r\n      let books = latestNovelAdditionsFirst(this.state.books).slice(0, 7);\r\n\r\n      //makes the insides of the carousel\r\n      books.forEach(function(book, index, books){\r\n        books[index] = \r\n        <a key={index.toString()} className=\"carouselHolder\">\r\n          <div className=\"carouselImageHolder\" style={{ \"backgroundImage\": `url(${book.picSource})`}}>\r\n          </div>\r\n            <div className=\"carouselTextHolder\">\r\n              <h2 className=\"carouselTextTitle\">\r\n                {JSON.stringify(book.name)}\r\n              </h2>\r\n              <div className=\"carouselButtonRow\">\r\n                <h3 className=\"carouselTextAddition\">New Addition!</h3>\r\n                {/* \r\n                gives each of the slider buttons the right modals to trigger, with the info from each book\r\n                on the other side the book sets the state in the modal. \r\n                */}\r\n                <Button\r\n                  classname={\"carouselModuleButton\"}\r\n                  text={\"Info\"}\r\n                  onclick={(e) => this.props.toggleModal(e, book)}\r\n                />\r\n              </div>\r\n              \r\n              <h6 className=\"carouselTextDescription\">\r\n                {JSON.stringify(book.description).slice(0, 300) + \"...\"}\r\n              </h6>\r\n            </div>\r\n          </a>;\r\n      }, this);\r\n\r\n      let carouselSettings = { arrow: false, dots: true, lazyLoad: true, infinite: true, speed: 500, slidesToShow: 1, slidesToScroll: 1, initialSlide: 0, adaptiveHeight: true, autoplay: false };\r\n      //returns the carousel with the insides\r\n      return <Slider {...carouselSettings}>{books}</Slider>;\r\n\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","//sorts for the newest additions to the database\r\nexport function latestNovelAdditionsFirst(books) { \r\n  let newOrder = books.sort(function (a, b) {\r\n    var datePartsA = a.dataAdded.split(\".\");\r\n    var datePartsB = b.dataAdded.split(\".\");\r\n    var alpha = new Date(datePartsA[2], datePartsA[1] - 1, datePartsA[0]);\r\n    var beta = new Date(datePartsB[2], datePartsB[1] - 1, datePartsB[0]);\r\n    return alpha.getTime() - beta.getTime()\r\n  })\r\n  return newOrder.reverse();\r\n}","import React from 'react';\r\nimport Button from \"./button\";\r\n\r\n//this gets updates once setState is triggered in app.js\r\nconst Modal = ({ showModal, modalContent, toggleModal }) => {\r\n    //if showmodal and modalcontent are there, render the modal\r\n    return showModal && modalContent ? (\r\n        <div className=\"modal\">\r\n        {/* you can click the modal away by tapping outside of it */}\r\n            <div className=\"modal__outer\" onClick={(e) => toggleModal(e)} ></div>\r\n            <div className=\"modal__inner\">\r\n            {/* and also by clicking the closing button duh */}\r\n                <Button\r\n                    classname={\"modal__inner__button modal__inner__button--close red\"}\r\n                    text={\"Close\"}\r\n                    onclick={(e) => toggleModal(e)}\r\n                />\r\n                {\r\n                    modalContent.name ? (\r\n                        <h1 className=\"modal__inner__headline\">\r\n                            {modalContent.name}\r\n                        </h1>\r\n                    ) : null\r\n                }\r\n                {\r\n                    modalContent.picSource ? (\r\n                        <div className=\"modal__inner__image-wrapper\">\r\n                            <img src={modalContent.picSource} alt={\"Book cover for \" + modalContent.name} />\r\n                        </div>\r\n                    ) : null\r\n                }\r\n                {\r\n                    modalContent.ranking ? (\r\n                        <h3 className=\"modal__inner__ranking\">\r\n                            Rating: {modalContent.ranking}/10\r\n                            </h3>\r\n                    ) : null\r\n                }\r\n                {\r\n                    modalContent.url ? (\r\n                        <a href={modalContent.url} target=\"_blank\" rel=\"noopener noreferrer\" style={{textDecoration:\"none\"}}>\r\n                            <Button\r\n                                classname={\"modal__inner__button modal__inner__button--external\"}\r\n                                text={\"Further Info\"}\r\n                            />\r\n                        </a>\r\n                    ) : null\r\n                }\r\n                {\r\n                    modalContent.description ? (\r\n                        <div className=\"modal__inner__description\">\r\n                            <h3>Description:</h3>\r\n                            <p>{modalContent.description}</p>\r\n                        </div>\r\n                    ) : null\r\n                }\r\n            </div>\r\n        </div>\r\n    ) : null\r\n}\r\n\r\nexport default Modal;","import React, { Component } from 'react';\r\nimport { elastic as Menu } from 'react-burger-menu'\r\nimport NewNovelCarousel from './components/carousel-new-novels';\r\nimport Modal from './components/shared/modal';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      //storing the whole book database\r\n      books: undefined,\r\n      showModal: false,\r\n      //gets loaded into when a modal is opened\r\n      modalContent: null,\r\n    };\r\n\r\n    //the bind is necessary so that it doesn't try to search in the window scope\r\n    this.toggleModal = this.toggleModal.bind(this);\r\n  }\r\n\r\n  //the menu is hiden before you scroll a fixed amount, just to make a clean appareance with the picture\r\n  showMenu = function () {\r\n    let button = document.getElementsByClassName(\"bm-burger-button\")[0];\r\n    if (window.scrollY >= 100) {\r\n      button.className = \"bm-burger-button show\";\r\n    } else {\r\n      button.className = \"bm-burger-button hide\";\r\n    }\r\n  };\r\n\r\n  //the modal remains empty before activation, then the setState updates the component with the information\r\n  //its gets triggered by onclicks from other components\r\n  toggleModal(e, content) {\r\n    e.preventDefault();\r\n\r\n    if (this.state.showModal) {\r\n      this.setState({\r\n        showModal: false,\r\n        modalContent: null\r\n      })\r\n    } else {\r\n      this.setState({\r\n        showModal: true,\r\n        modalContent: content\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.getElementsByClassName(\"bm-burger-button\")[0].className = \"bm-burger-button hide\";\r\n    window.addEventListener('scroll', this.showMenu);\r\n  }\r\n\r\n  //accounts for the database to update while browsing and enforcing the data being there\r\n  componentDidUpdate() {\r\n    if (this.state.books) {\r\n      if (this.props.books !== this.state.books) {\r\n        this.setState({ books: this.props.books });\r\n      }\r\n    } else {\r\n      this.setState({ books: this.props.books });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { showModal, modalContent } = this.state;\r\n\r\n    return (\r\n      <div className=\"All\" id=\"top\">\r\n        <Menu width={250}>\r\n            <a id=\"home\" className=\"menu-item\" href=\"#top\">\r\n              Top\r\n            </a>\r\n            <a id=\"chinese\" className=\"menu-item\" href=\"#lists\">\r\n              Detailed Lists\r\n            </a>\r\n            <a id=\"contact\" className=\"menu-item\" href=\"#contact\">\r\n              Contact\r\n            </a>\r\n        </Menu>\r\n\r\n        <div className=\"Front\" />\r\n\r\n        <div className=\"carouselContainer\">\r\n          <NewNovelCarousel books={this.state.books} toggleModal={this.toggleModal} />\r\n        </div>\r\n\r\n        <Modal \r\n          toggleModal={this.toggleModal} \r\n          showModal={showModal} \r\n          modalContent={modalContent} \r\n        />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Helmet } from \"react-helmet\";\r\nimport axios from \"axios\";\r\nimport App from './App';\r\nimport './scss/App.scss';\r\n\r\nclass Base extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      books: undefined\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(`https://alexever17.herokuapp.com/api/novels?sort=1`)\r\n      .then(res => {\r\n        const books = res.data;\r\n        this.setState({ books });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Helmet>                         \r\n          <meta charSet=\"utf-8\" />\r\n          <title>Alexever17's Novel Rankings</title>\r\n          <meta name=\"author\" content=\"Oleksandr Malakhov</meta>\" />\r\n          <meta name=\"description\" content=\"Gaze upon my favorite novels and maybe you will find something interesting for yourself!\" />\r\n          <link rel=\"icon\" href=\"images/favicon.gif\" type=\"image/gif\" sizes=\"16x16\"></link>\r\n          <meta name=\"keywords\" content=\"Oleksandr, Malakhov, alexever17, novels, fantasy, coding\" />\r\n          <meta property=\"og:image\" content=\"https://alexever17.github.io/novels/images/library</meta>.jpg\" />\r\n        </Helmet>\r\n        <App books={this.state.books} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nReactDOM.render(<Base />, document.getElementById(\"root\"));"],"sourceRoot":""}