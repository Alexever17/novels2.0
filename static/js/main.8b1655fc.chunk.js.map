{"version":3,"sources":["components/carousel-new-novels.js","components/helperFunctions.js","components/shared/modal.jsx","App.js","index.js"],"names":["NewNovelCarousel","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","books","undefined","book","setState","sort","a","b","datePartsA","dataAdded","split","datePartsB","alpha","Date","beta","getTime","reverse","latestNovelAdditionsFirst","slice","forEach","index","_this2","react_default","createElement","key","toString","href","JSON","stringify","url","className","style","backgroundImage","concat","picSource","onClick","e","toggleModal","name","description","lib_default","arrow","dots","lazyLoad","infinite","speed","slidesToShow","slidesToScroll","initialSlide","adaptiveHeight","autoplay","React","Component","Modal","_ref","showModal","modalContent","src","alt","ranking","target","rel","App","showMenu","button","document","getElementsByClassName","window","scrollY","bind","assertThisInitialized","content","preventDefault","addEventListener","_this$state","id","BurgerMenu","width","carousel_new_novels_NewNovelCarousel","modal","Base","axios","get","then","res","data","Helmet","charSet","type","sizes","property","src_App","ReactDOM","render","src_Base","getElementById"],"mappings":"6RAIqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CAAEC,WAAOC,EAAWC,UAAMD,GAHtBT,oFAQbG,KAAKI,MAAMC,MACTL,KAAKJ,MAAMS,QAAUL,KAAKI,MAAMC,OAClCL,KAAKQ,SAAS,CAAEH,MAAOL,KAAKJ,MAAMS,QAGpCL,KAAKQ,SAAS,CAAEH,MAAOL,KAAKJ,MAAMS,yCAKpC,GAAIL,KAAKI,MAAMC,MAAO,CAGpB,IAAIA,ECzBH,SAAmCA,GAQxC,OAPeA,EAAMI,KAAK,SAAUC,EAAGC,GACrC,IAAIC,EAAaF,EAAEG,UAAUC,MAAM,KAC/BC,EAAaJ,EAAEE,UAAUC,MAAM,KAC/BE,EAAQ,IAAIC,KAAKL,EAAW,GAAIA,EAAW,GAAK,EAAGA,EAAW,IAC9DM,EAAO,IAAID,KAAKF,EAAW,GAAIA,EAAW,GAAK,EAAGA,EAAW,IACjE,OAAOC,EAAMG,UAAYD,EAAKC,YAEhBC,UDiBAC,CAA0BrB,KAAKI,MAAMC,OAAOiB,MAAM,EAAG,GAGjEjB,EAAMkB,QAAQ,SAAShB,EAAMiB,EAAOnB,GAAM,IAAAoB,EAAAzB,KACxCK,EAAMmB,GACNE,EAAAhB,EAAAiB,cAAA,KAAGC,IAAKJ,EAAMK,WAAYC,KAAMC,KAAKC,UAAUzB,EAAK0B,KAAMC,UAAU,kBAClER,EAAAhB,EAAAiB,cAAA,OAAKO,UAAU,sBAAsBC,MAAO,CAAEC,gBAAA,OAAAC,OAA0B9B,EAAK+B,UAA/B,QAE5CZ,EAAAhB,EAAAiB,cAAA,OAAKO,UAAU,sBACbR,EAAAhB,EAAAiB,cAAA,OAAKO,UAAU,oBACbR,EAAAhB,EAAAiB,cAAA,MAAIO,UAAU,wBAAd,iBAKAR,EAAAhB,EAAAiB,cAAA,UAAQO,UAAU,iBAAiBK,QAAS,SAACC,GAAD,OAAOf,EAAK7B,MAAM6C,YAAYD,EAAGjC,KAA7E,SAEFmB,EAAAhB,EAAAiB,cAAA,MAAIO,UAAU,qBACXH,KAAKC,UAAUzB,EAAKmC,OAEvBhB,EAAAhB,EAAAiB,cAAA,MAAIO,UAAU,2BACXH,KAAKC,UAAUzB,EAAKoC,aAAarB,MAAM,EAAG,KAAO,UAIzDtB,MAIH,OAAO0B,EAAAhB,EAAAiB,cAACiB,EAAAlC,EAFe,CAAEmC,OAAO,EAAOC,MAAM,EAAMC,UAAU,EAAMC,UAAU,EAAMC,MAAO,IAAKC,aAAc,EAAGC,eAAgB,EAAGC,aAAc,EAAGC,gBAAgB,EAAMC,UAAU,GAE9IjD,GAGtC,OAAO,YAtDiCkD,IAAMC,WE+CrCC,EAhDD,SAAAC,GAA8C,IAA3CC,EAA2CD,EAA3CC,UAAWC,EAAgCF,EAAhCE,aAAcnB,EAAkBiB,EAAlBjB,YAEtC,OAAOkB,GAAaC,EAChBlC,EAAAhB,EAAAiB,cAAA,OAAKO,UAAU,SAEXR,EAAAhB,EAAAiB,cAAA,OAAKO,UAAU,eAAeK,QAAS,SAACC,GAAD,OAAOC,EAAYD,MAC1Dd,EAAAhB,EAAAiB,cAAA,OAAKO,UAAU,gBAEXR,EAAAhB,EAAAiB,cAAA,UAAQO,UAAU,mDAAmDK,QAAS,SAACC,GAAD,OAAOC,EAAYD,KAAjG,WAEIoB,EAAalB,KACThB,EAAAhB,EAAAiB,cAAA,MAAIO,UAAU,0BACT0B,EAAalB,MAElB,KAGJkB,EAAatB,UACTZ,EAAAhB,EAAAiB,cAAA,OAAKO,UAAU,+BACXR,EAAAhB,EAAAiB,cAAA,OAAKkC,IAAKD,EAAatB,UAAWwB,IAAK,kBAAoBF,EAAalB,QAE5E,KAGJkB,EAAaG,QACTrC,EAAAhB,EAAAiB,cAAA,MAAIO,UAAU,yBAAd,WACa0B,EAAaG,QAD1B,OAGA,KAGJH,EAAa3B,IACTP,EAAAhB,EAAAiB,cAAA,KAAGG,KAAM8B,EAAa3B,IAAK+B,OAAO,SAASC,IAAI,sBAAsB/B,UAAU,uDAA/E,gBACA,KAGJ0B,EAAajB,YACTjB,EAAAhB,EAAAiB,cAAA,OAAKO,UAAU,6BACXR,EAAAhB,EAAAiB,cAAA,0BACAD,EAAAhB,EAAAiB,cAAA,SAAIiC,EAAajB,cAErB,OAIhB,MCmDOuB,cA5Fb,SAAAA,EAAYtE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkE,IACjBrE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoE,GAAA/D,KAAAH,KAAMJ,KAcRuE,SAAW,WACT,IAAIC,EAASC,SAASC,uBAAuB,oBAAoB,GAC7DC,OAAOC,SAAW,IACpBJ,EAAOlC,UAAY,wBAEnBkC,EAAOlC,UAAY,yBAlBrBrC,EAAKO,MAAQ,CAEXC,WAAOC,EACPqD,WAAW,EAEXC,aAAc,MAIhB/D,EAAK4C,YAAc5C,EAAK4C,YAAYgC,KAAjB3E,OAAA4E,EAAA,EAAA5E,QAAA4E,EAAA,EAAA5E,CAAAD,KAXFA,2EA0BP2C,EAAGmC,GACbnC,EAAEoC,iBAEE5E,KAAKI,MAAMuD,UACb3D,KAAKQ,SAAS,CACZmD,WAAW,EACXC,aAAc,OAGhB5D,KAAKQ,SAAS,CACZmD,WAAW,EACXC,aAAce,gDAMlBN,SAASC,uBAAuB,oBAAoB,GAAGpC,UAAY,wBACnEqC,OAAOM,iBAAiB,SAAU7E,KAAKmE,uDAKnCnE,KAAKI,MAAMC,MACTL,KAAKJ,MAAMS,QAAUL,KAAKI,MAAMC,OAClCL,KAAKQ,SAAS,CAAEH,MAAOL,KAAKJ,MAAMS,QAGpCL,KAAKQ,SAAS,CAAEH,MAAOL,KAAKJ,MAAMS,yCAI7B,IAAAyE,EAC6B9E,KAAKI,MAAjCuD,EADDmB,EACCnB,UAAWC,EADZkB,EACYlB,aAEnB,OACElC,EAAAhB,EAAAiB,cAAA,OAAKO,UAAU,MAAM6C,GAAG,OACtBrD,EAAAhB,EAAAiB,cAACqD,EAAA,QAAD,CAAMC,MAAO,KACTvD,EAAAhB,EAAAiB,cAAA,KAAGoD,GAAG,OAAO7C,UAAU,YAAYJ,KAAK,QAAxC,OAGAJ,EAAAhB,EAAAiB,cAAA,KAAGoD,GAAG,UAAU7C,UAAU,YAAYJ,KAAK,UAA3C,kBAGAJ,EAAAhB,EAAAiB,cAAA,KAAGoD,GAAG,UAAU7C,UAAU,YAAYJ,KAAK,YAA3C,YAKJJ,EAAAhB,EAAAiB,cAAA,OAAKO,UAAU,UAEfR,EAAAhB,EAAAiB,cAAA,OAAKO,UAAU,qBACbR,EAAAhB,EAAAiB,cAACuD,EAAD,CAAkB7E,MAAOL,KAAKI,MAAMC,MAAOoC,YAAazC,KAAKyC,eAG/Df,EAAAhB,EAAAiB,cAACwD,EAAD,CACE1C,YAAazC,KAAKyC,YAClBkB,UAAWA,EACXC,aAAcA,YArFNJ,aCCZ4B,qBACJ,SAAAA,EAAYxF,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoF,IACjBvF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsF,GAAAjF,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAOC,GAHQT,mFAOC,IAAA4B,EAAAzB,KAClBqF,IACGC,IADH,sDAEGC,KAAK,SAAAC,GACJ,IAAMnF,EAAQmF,EAAIC,KAClBhE,EAAKjB,SAAS,CAAEH,6CAKpB,OACEqB,EAAAhB,EAAAiB,cAAA,WACED,EAAAhB,EAAAiB,cAAC+D,EAAA,OAAD,KACEhE,EAAAhB,EAAAiB,cAAA,QAAMgE,QAAQ,UACdjE,EAAAhB,EAAAiB,cAAA,4CACAD,EAAAhB,EAAAiB,cAAA,QAAMe,KAAK,SAASiC,QAAQ,8BAC5BjD,EAAAhB,EAAAiB,cAAA,QAAMe,KAAK,cAAciC,QAAQ,6FACjCjD,EAAAhB,EAAAiB,cAAA,QAAMsC,IAAI,OAAOnC,KAAK,qBAAqB8D,KAAK,YAAYC,MAAM,UAClEnE,EAAAhB,EAAAiB,cAAA,QAAMe,KAAK,WAAWiC,QAAQ,6DAC9BjD,EAAAhB,EAAAiB,cAAA,QAAMmE,SAAS,WAAWnB,QAAQ,mEAEpCjD,EAAAhB,EAAAiB,cAACoE,EAAD,CAAK1F,MAAOL,KAAKI,MAAMC,gBA7BZkD,IAAMC,YAkCzBwC,IAASC,OAAOvE,EAAAhB,EAAAiB,cAACuE,EAAD,MAAU7B,SAAS8B,eAAe","file":"static/js/main.8b1655fc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { latestNovelAdditionsFirst } from \"../components/helperFunctions\";\r\nimport Slider from \"react-slick\";\r\n\r\nexport default class NewNovelCarousel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //books stores the whole database, book is for an individual book\r\n    this.state = { books: undefined, book: undefined };\r\n  }\r\n\r\n  //accounts for the database to update while browsing and enforcing the data being there\r\n  componentDidUpdate() {\r\n    if (this.state.books) {\r\n      if (this.props.books !== this.state.books) {\r\n        this.setState({ books: this.props.books });\r\n      }\r\n    } else {\r\n      this.setState({ books: this.props.books });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.books) {\r\n\r\n      //searches for the newest additions to the database\r\n      let books = latestNovelAdditionsFirst(this.state.books).slice(0, 7);\r\n\r\n      //makes the insides of the carousel\r\n      books.forEach(function(book, index, books){\r\n        books[index] = \r\n        <a key={index.toString()} href={JSON.stringify(book.url)} className=\"carouselHolder\">\r\n          <div className=\"carouselImageHolder\" style={{ \"backgroundImage\": `url(${book.picSource})`}}>\r\n          </div>\r\n            <div className=\"carouselTextHolder\">\r\n              <div className=\"carouselFirstRow\">\r\n                <h3 className=\"carouselTextAddition\">New Addition!</h3>\r\n                {/* \r\n                gives each of the slider buttons the right modals to trigger, with the info from each book\r\n                on the other side the book sets the state in the modal. \r\n                */}\r\n                <button className=\"carouselModule\" onClick={(e) => this.props.toggleModal(e, book)} >Info</button>\r\n              </div>\r\n              <h2 className=\"carouselTextTitle\">\r\n                {JSON.stringify(book.name)}\r\n              </h2>\r\n              <h6 className=\"carouselTextDescription\">\r\n                {JSON.stringify(book.description).slice(0, 300) + \"...\"}\r\n              </h6>\r\n            </div>\r\n          </a>;\r\n      }, this);\r\n\r\n      let carouselSettings = { arrow: false, dots: true, lazyLoad: true, infinite: true, speed: 500, slidesToShow: 1, slidesToScroll: 1, initialSlide: 0, adaptiveHeight: true, autoplay: false };\r\n      //returns the carousel with the insides\r\n      return <Slider {...carouselSettings}>{books}</Slider>;\r\n\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","//sorts for the newest additions to the database\r\nexport function latestNovelAdditionsFirst(books) { \r\n  let newOrder = books.sort(function (a, b) {\r\n    var datePartsA = a.dataAdded.split(\".\");\r\n    var datePartsB = b.dataAdded.split(\".\");\r\n    var alpha = new Date(datePartsA[2], datePartsA[1] - 1, datePartsA[0]);\r\n    var beta = new Date(datePartsB[2], datePartsB[1] - 1, datePartsB[0]);\r\n    return alpha.getTime() - beta.getTime()\r\n  })\r\n  return newOrder.reverse();\r\n}","import React from 'react';\r\n\r\n//this gets updates once setState is triggered in app.js\r\nconst Modal = ({ showModal, modalContent, toggleModal }) => {\r\n    //if showmodal and modalcontent are there, render the modal\r\n    return showModal && modalContent ? (\r\n        <div className=\"modal\">\r\n        {/* you can click the modal away by tapping outside of it */}\r\n            <div className=\"modal__outer\" onClick={(e) => toggleModal(e)} ></div>\r\n            <div className=\"modal__inner\">\r\n            {/* and also by clicking the closing button duh */}\r\n                <button className=\"modal__inner__button modal__inner__button--close\" onClick={(e) => toggleModal(e)}>X Close</button>\r\n                {\r\n                    modalContent.name ? (\r\n                        <h1 className=\"modal__inner__headline\">\r\n                            {modalContent.name}\r\n                        </h1>\r\n                    ) : null\r\n                }\r\n                {\r\n                    modalContent.picSource ? (\r\n                        <div className=\"modal__inner__image-wrapper\">\r\n                            <img src={modalContent.picSource} alt={\"Book cover for \" + modalContent.name} />\r\n                        </div>\r\n                    ) : null\r\n                }\r\n                {\r\n                    modalContent.ranking ? (\r\n                        <h3 className=\"modal__inner__ranking\">\r\n                            Rating: {modalContent.ranking}/10\r\n                            </h3>\r\n                    ) : null\r\n                }\r\n                {\r\n                    modalContent.url ? (\r\n                        <a href={modalContent.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"modal__inner__button modal__inner__button--external\">Further Info</a>\r\n                    ) : null\r\n                }\r\n                {\r\n                    modalContent.description ? (\r\n                        <div className=\"modal__inner__description\">\r\n                            <h3>Description:</h3>\r\n                            <p>{modalContent.description}</p>\r\n                        </div>\r\n                    ) : null\r\n                }\r\n            </div>\r\n        </div>\r\n    ) : null\r\n}\r\n\r\nexport default Modal;","import React, { Component } from 'react';\r\nimport { elastic as Menu } from 'react-burger-menu'\r\nimport NewNovelCarousel from './components/carousel-new-novels';\r\nimport Modal from './components/shared/modal';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      //storing the whole book database\r\n      books: undefined,\r\n      showModal: false,\r\n      //gets loaded into when a modal is opened\r\n      modalContent: null,\r\n    };\r\n\r\n    //the bind is necessary so that it doesn't try to search in the window scope\r\n    this.toggleModal = this.toggleModal.bind(this);\r\n  }\r\n\r\n  //the menu is hiden before you scroll a fixed amount, just to make a clean appareance with the picture\r\n  showMenu = function () {\r\n    let button = document.getElementsByClassName(\"bm-burger-button\")[0];\r\n    if (window.scrollY >= 100) {\r\n      button.className = \"bm-burger-button show\";\r\n    } else {\r\n      button.className = \"bm-burger-button hide\";\r\n    }\r\n  };\r\n\r\n  //the modal remains empty before activation, then the setState updates the component with the information\r\n  //its gets triggered by onclicks from other components\r\n  toggleModal(e, content) {\r\n    e.preventDefault();\r\n\r\n    if (this.state.showModal) {\r\n      this.setState({\r\n        showModal: false,\r\n        modalContent: null\r\n      })\r\n    } else {\r\n      this.setState({\r\n        showModal: true,\r\n        modalContent: content\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.getElementsByClassName(\"bm-burger-button\")[0].className = \"bm-burger-button hide\";\r\n    window.addEventListener('scroll', this.showMenu);\r\n  }\r\n\r\n  //accounts for the database to update while browsing and enforcing the data being there\r\n  componentDidUpdate() {\r\n    if (this.state.books) {\r\n      if (this.props.books !== this.state.books) {\r\n        this.setState({ books: this.props.books });\r\n      }\r\n    } else {\r\n      this.setState({ books: this.props.books });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { showModal, modalContent } = this.state;\r\n\r\n    return (\r\n      <div className=\"All\" id=\"top\">\r\n        <Menu width={250}>\r\n            <a id=\"home\" className=\"menu-item\" href=\"#top\">\r\n              Top\r\n            </a>\r\n            <a id=\"chinese\" className=\"menu-item\" href=\"#lists\">\r\n              Detailed Lists\r\n            </a>\r\n            <a id=\"contact\" className=\"menu-item\" href=\"#contact\">\r\n              Contact\r\n            </a>\r\n        </Menu>\r\n\r\n        <div className=\"Front\" />\r\n\r\n        <div className=\"carouselContainer\">\r\n          <NewNovelCarousel books={this.state.books} toggleModal={this.toggleModal} />\r\n        </div>\r\n\r\n        <Modal \r\n          toggleModal={this.toggleModal} \r\n          showModal={showModal} \r\n          modalContent={modalContent} \r\n        />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Helmet } from \"react-helmet\";\r\nimport axios from \"axios\";\r\nimport App from './App';\r\nimport './scss/App.scss';\r\n\r\nclass Base extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      books: undefined\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(`https://alexever17.herokuapp.com/api/novels?sort=1`)\r\n      .then(res => {\r\n        const books = res.data;\r\n        this.setState({ books });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Helmet>                         \r\n          <meta charSet=\"utf-8\" />\r\n          <title>Alexever17's Novel Rankings</title>\r\n          <meta name=\"author\" content=\"Oleksandr Malakhov</meta>\" />\r\n          <meta name=\"description\" content=\"Gaze upon my favorite novels and maybe you will find something interesting for yourself!\" />\r\n          <link rel=\"icon\" href=\"images/favicon.gif\" type=\"image/gif\" sizes=\"16x16\"></link>\r\n          <meta name=\"keywords\" content=\"Oleksandr, Malakhov, alexever17, novels, fantasy, coding\" />\r\n          <meta property=\"og:image\" content=\"https://alexever17.github.io/novels/images/library</meta>.jpg\" />\r\n        </Helmet>\r\n        <App books={this.state.books} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nReactDOM.render(<Base />, document.getElementById(\"root\"));"],"sourceRoot":""}